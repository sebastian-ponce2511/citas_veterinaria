CITAS REACT

1) npm init vite@latest
2) npm i => cd carpeta, etc => npm run dev
3) limpiar scafolding
4) Crear componentes: Header, Formulario, ListadoPacientes
5) Instalar Tailwind => Abrir terminal: npm i -D tailwindcss postcss autoprefixer
	Crear archivos de config: npx tailwindcss init -p
6) Agregar en index.css: @tailwind base; @tailwind components; @tailwind utilities;
7) En el archivo de config de tailwind, dentro de content poner en donde va a mirar tailwind para aplicar los estilos, definimos index.html (raiz) y que busque en todos los archivos con extension .jsx
	"./index.html", "./src/**/*.jsx"
8) Reiniciar la terminal donde se está ejecutando el servidor
9) en index.html poner una clase de tailwind al body "bg-gray-100 h-screen"
10) en App.jsx poner un contenedor al div que envuelve todo "container mx-auto"

11) Estilos a Header: 
	
const Header = () => {
  return (
    <h1 className="font-black text-5xl text-center md:w-2/3 mx-auto">
      Seguimiento Pacientes <span className="text-indigo-600">Veterinaria</span>
    </h1>
  );
};

export default Header;

12) Poner en App un div que contenga Formulario y ListadoPacientes, con clase "mt-12 md:flex" (md = media querie. Para dispo. chicos, que se apilen)
13) En formulario poner un div con clase "md:w-1/2 lg:w-2/5" que contenga el h1. En ListadoPacientes "w-1/2 lg:w-3/5
14) Poner un form abajo del <p> anterior

//////////////////////////////////////////////////////////////////////////////////////

const Formulario = () => {
  return (
    <div className="md:w-1/2 lg:w-2/5 mx-5 mb-8">
      <h2 className="font-black text-3xl text-center">Seguimiento Pacientes</h2>

      <p className="text-lg text-center mt-5 mb-10">
        Añade Pacientes y{" "}
        <span className="text-indigo-600 font-bold">Adminístralos</span>
      </p>

      <form className="bg-white shadow-md rounded-lg py-10 px-5">
        <div className="mb-5">
          <label
            htmlFor="mascota"
            className="block text-gray-700 uppercase font-bold"
          >
            Nombre Mascota
          </label>

          <input
            id="mascota"
            className="border-2 p-2 mt-2 w-full placeholder-gray-400 rounded-lg"
            type="text"
            placeholder="Nombre de la mascota"
          />
        </div>

        <div className="mb-5">
          <label
            htmlFor="propietario"
            className="block text-gray-700 uppercase font-bold"
          >
            Nombre Propietario
          </label>

          <input
            id="propietario"
            className="border-2 p-2 mt-2 w-full placeholder-gray-400 rounded-lg"
            type="text"
            placeholder="Nombre de la mascota"
          />
        </div>

        <div className="mb-5">
          <label
            htmlFor="email"
            className="block text-gray-700 uppercase font-bold"
          >
            Email
          </label>

          <input
            id="email"
            className="border-2 p-2 mt-2 w-full placeholder-gray-400 rounded-lg"
            type="email"
            placeholder="Nombre de la mascota"
          />
        </div>

        <div className="mb-5">
          <label
            htmlFor="alta"
            className="block text-gray-700 uppercase font-bold"
          >
            Alta
          </label>

          <input
            id="alta"
            className="border-2 p-2 mt-2 w-full"
            type="date"
            placeholder="Nombre de la mascota"
          />
        </div>

        <div className="mb-5">
          <label
            htmlFor="sintomas"
            className="block text-gray-700 uppercase font-bold"
          >
            Síntomas
          </label>

          <textarea
            id="sintomas"
            className="border-2 p-2 mt-2 w-full rounded-lg"
            placeholder="Describe los síntomas"
          />
        </div>

        <input
          type="submit"
          className="bg-indigo-600 w-full p-3 text-white uppercase font-bold cursor-pointer rounded-lg hover:bg-indigo-700"
          value="Agregar Paciente"
        />
      </form>
    </div>
  );
};

export default Formulario;

//////////////////////////////////////////////////////////////////////////////////////

15) Estilos a ListadoPacientes

//////////////////////////////////////////////////////////////////////////////////////

const ListadoPacientes = () => {
  return (
    <div className="md:w-1/2 lg:w-3/5 h-screen overflow-y-scroll">
      <h2 className="font-black text-3xl text-center">Listado Pacientes</h2>
      <p className="text-lg text-center mt-5 mb-10">
        Administra tus{" "}
        <span className="text-indigo-600 font-bold">Pacientes y Citas</span>
      </p>
      <Paciente />
    </div>
  );
};

export default ListadoPacientes;

//////////////////////////////////////////////////////////////////////////////////////

16) Crear el componente Paciente 

const Paciente = () => {
  return (
    <div className="mx-3 mb-5 bg-white shadow-md px-5 py-10 rounded-xl">
      <p className="font-bold mb-3 text-gray-700 uppercase">
        Nombre: <span className="font-normal normal-case">Hook</span>
      </p>

      <p className="font-bold mb-3 text-gray-700 uppercase">
        Propietario: <span className="font-normal normal-case">Richard</span>
      </p>

      <p className="font-bold mb-3 text-gray-700 uppercase">
        Email:{" "}
        <span className="font-normal normal-case">richard123@gmail.com</span>
      </p>

      <p className="font-bold mb-3 text-gray-700 uppercase">
        Alta:{" "}
        <span className="font-normal normal-case">12 Diciembre del 2022</span>
      </p>

      <p className="font-bold mb-3 text-gray-700 uppercase">
        Síntomas:{" "}
        <span className="font-normal normal-case">
          Lorem ipsum dolor sit, amet consectetur adipisicing elit. Velit,
          expedita facilis. Dolores maiores quisquam suscipit, libero rem
          voluptates. Quia tenetur assumenda reiciendis quasi iusto provident
          laudantium temporibus esse rerum mollitia!
        </span>
      </p>
    </div>
  );
};

export default Paciente;

17) En Formulario definir los states para cada campo del form y el state de mensaje de error
18) Agregar validacion:

const handleSubmit = (e) => {
    e.preventDefault();
    if ([nombre, propietario, email, alta, sintomas].includes("")) {
      setError(true);
    } else {
      setError(false);
    }
  };

19) Crear el componente Error y renderizarlo si no pasa la validación

const Error = () => {
  return (
    <div className="bg-red-700 p-3 mb-3 text-white text-center uppercase font-bold rounded-lg">
      <p>Todos los campos son obligatorios</p>
    </div>
  );
};

export default Error;

20) Pasar los datos de los pacientes a otros componentes: Definir en App el state pacientes, setPacientes => pasarlos como prop a formulario => extraerlos
21) Crear un objeto con nombre, propietario, etc
22) Cuando pase la validacion definir setPacientes([...pacientes, objetoPacientes])
23) reiniciar form => setNombre('')...etc



